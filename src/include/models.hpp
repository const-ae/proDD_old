
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_estimate_sigmoid_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_estimate_sigmoid");
    reader.add_event(102, 102, "end", "model_estimate_sigmoid");
    return reader;
}

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
hurdle_normal_lpdf(const T0__& y,
                       const T1__& mu,
                       const T2__& sigma,
                       const T3__& hu, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        if (as_bool(logical_eq(y,0))) {

            return stan::math::promote_scalar<fun_return_scalar_t__>(bernoulli_log(1,hu));
        } else {

            return stan::math::promote_scalar<fun_return_scalar_t__>((bernoulli_log(0,hu) + normal_log(y,mu,sigma)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
hurdle_normal_lpdf(const T0__& y,
                       const T1__& mu,
                       const T2__& sigma,
                       const T3__& hu, std::ostream* pstream__) {
    return hurdle_normal_lpdf<false>(y,mu,sigma,hu, pstream__);
}


struct hurdle_normal_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
                       const T1__& mu,
                       const T2__& sigma,
                       const T3__& hu, std::ostream* pstream__) const {
        return hurdle_normal_lpdf(y, mu, sigma, hu, pstream__);
    }
};

template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
hurdle_normal_logit_lpdf(const T0__& y,
                             const T1__& mu,
                             const T2__& sigma,
                             const T3__& hu, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        if (as_bool(logical_eq(y,0))) {

            return stan::math::promote_scalar<fun_return_scalar_t__>(bernoulli_logit_log(1,hu));
        } else {

            return stan::math::promote_scalar<fun_return_scalar_t__>((bernoulli_logit_log(0,hu) + normal_log(y,mu,sigma)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
hurdle_normal_logit_lpdf(const T0__& y,
                             const T1__& mu,
                             const T2__& sigma,
                             const T3__& hu, std::ostream* pstream__) {
    return hurdle_normal_logit_lpdf<false>(y,mu,sigma,hu, pstream__);
}


struct hurdle_normal_logit_lpdf_functor__ {
    template <bool propto, typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& y,
                             const T1__& mu,
                             const T2__& sigma,
                             const T3__& hu, std::ostream* pstream__) const {
        return hurdle_normal_logit_lpdf(y, mu, sigma, hu, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
prob_fnc(const T0__& mu,
             const T1__& location,
             const T2__& scale, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(inv_logit(((mu - location) / scale)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct prob_fnc_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& mu,
             const T1__& location,
             const T2__& scale, std::ostream* pstream__) const {
        return prob_fnc(mu, location, scale, pstream__);
    }
};

class model_estimate_sigmoid : public prob_grad {
private:
    int N_genes;
    int N_samp;
    int N_cond;
    matrix_d Y;
    vector<int> design;
    double f_nu;
    double f_sigma;
public:
    model_estimate_sigmoid(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_estimate_sigmoid(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_estimate_sigmoid_namespace::model_estimate_sigmoid";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N_genes", "int", context__.to_vec());
        N_genes = int(0);
        vals_i__ = context__.vals_i("N_genes");
        pos__ = 0;
        N_genes = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_samp", "int", context__.to_vec());
        N_samp = int(0);
        vals_i__ = context__.vals_i("N_samp");
        pos__ = 0;
        N_samp = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_cond", "int", context__.to_vec());
        N_cond = int(0);
        vals_i__ = context__.vals_i("N_cond");
        pos__ = 0;
        N_cond = vals_i__[pos__++];
        validate_non_negative_index("Y", "N_genes", N_genes);
        validate_non_negative_index("Y", "N_samp", N_samp);
        context__.validate_dims("data initialization", "Y", "matrix_d", context__.to_vec(N_genes,N_samp));
        validate_non_negative_index("Y", "N_genes", N_genes);
        validate_non_negative_index("Y", "N_samp", N_samp);
        Y = matrix_d(static_cast<Eigen::VectorXd::Index>(N_genes),static_cast<Eigen::VectorXd::Index>(N_samp));
        vals_r__ = context__.vals_r("Y");
        pos__ = 0;
        size_t Y_m_mat_lim__ = N_genes;
        size_t Y_n_mat_lim__ = N_samp;
        for (size_t n_mat__ = 0; n_mat__ < Y_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < Y_m_mat_lim__; ++m_mat__) {
                Y(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("design", "N_samp", N_samp);
        context__.validate_dims("data initialization", "design", "int", context__.to_vec(N_samp));
        validate_non_negative_index("design", "N_samp", N_samp);
        design = std::vector<int>(N_samp,int(0));
        vals_i__ = context__.vals_i("design");
        pos__ = 0;
        size_t design_limit_0__ = N_samp;
        for (size_t i_0__ = 0; i_0__ < design_limit_0__; ++i_0__) {
            design[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "f_nu", "double", context__.to_vec());
        f_nu = double(0);
        vals_r__ = context__.vals_r("f_nu");
        pos__ = 0;
        f_nu = vals_r__[pos__++];
        context__.validate_dims("data initialization", "f_sigma", "double", context__.to_vec());
        f_sigma = double(0);
        vals_r__ = context__.vals_r("f_sigma");
        pos__ = 0;
        f_sigma = vals_r__[pos__++];

        // validate, data variables
        check_greater_or_equal(function__,"N_genes",N_genes,0);
        check_greater_or_equal(function__,"N_samp",N_samp,0);
        check_greater_or_equal(function__,"N_cond",N_cond,0);
        for (int k0__ = 0; k0__ < N_samp; ++k0__) {
            check_greater_or_equal(function__,"design[k0__]",design[k0__],1);
        }
        check_greater_or_equal(function__,"f_nu",f_nu,0);
        check_greater_or_equal(function__,"f_sigma",f_sigma,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("sample_mean", "N_genes", N_genes);
        num_params_r__ += N_genes;
        validate_non_negative_index("beta", "N_genes", N_genes);
        validate_non_negative_index("beta", "(N_cond - 1)", (N_cond - 1));
        num_params_r__ += N_genes * (N_cond - 1);
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("f_var", "N_genes", N_genes);
        num_params_r__ += N_genes;
        ++num_params_r__;
    }

    ~model_estimate_sigmoid() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("location")))
            throw std::runtime_error("variable location missing");
        vals_r__ = context__.vals_r("location");
        pos__ = 0U;
        context__.validate_dims("initialization", "location", "double", context__.to_vec());
        // generate_declaration location
        double location(0);
        location = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,location);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable location: ") + e.what());
        }

        if (!(context__.contains_r("scale_inv")))
            throw std::runtime_error("variable scale_inv missing");
        vals_r__ = context__.vals_r("scale_inv");
        pos__ = 0U;
        context__.validate_dims("initialization", "scale_inv", "double", context__.to_vec());
        // generate_declaration scale_inv
        double scale_inv(0);
        scale_inv = vals_r__[pos__++];
        try {
            writer__.scalar_ub_unconstrain(0,scale_inv);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable scale_inv: ") + e.what());
        }

        if (!(context__.contains_r("sample_mean")))
            throw std::runtime_error("variable sample_mean missing");
        vals_r__ = context__.vals_r("sample_mean");
        pos__ = 0U;
        validate_non_negative_index("sample_mean", "N_genes", N_genes);
        context__.validate_dims("initialization", "sample_mean", "vector_d", context__.to_vec(N_genes));
        // generate_declaration sample_mean
        vector_d sample_mean(static_cast<Eigen::VectorXd::Index>(N_genes));
        for (int j1__ = 0U; j1__ < N_genes; ++j1__)
            sample_mean(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(sample_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sample_mean: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "N_genes", N_genes);
        validate_non_negative_index("beta", "(N_cond - 1)", (N_cond - 1));
        context__.validate_dims("initialization", "beta", "matrix_d", context__.to_vec(N_genes,(N_cond - 1)));
        // generate_declaration beta
        matrix_d beta(static_cast<Eigen::VectorXd::Index>(N_genes),static_cast<Eigen::VectorXd::Index>((N_cond - 1)));
        for (int j2__ = 0U; j2__ < (N_cond - 1); ++j2__)
            for (int j1__ = 0U; j1__ < N_genes; ++j1__)
                beta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("f_mean")))
            throw std::runtime_error("variable f_mean missing");
        vals_r__ = context__.vals_r("f_mean");
        pos__ = 0U;
        context__.validate_dims("initialization", "f_mean", "double", context__.to_vec());
        // generate_declaration f_mean
        double f_mean(0);
        f_mean = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(f_mean);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable f_mean: ") + e.what());
        }

        if (!(context__.contains_r("f_hyper_sd")))
            throw std::runtime_error("variable f_hyper_sd missing");
        vals_r__ = context__.vals_r("f_hyper_sd");
        pos__ = 0U;
        context__.validate_dims("initialization", "f_hyper_sd", "double", context__.to_vec());
        // generate_declaration f_hyper_sd
        double f_hyper_sd(0);
        f_hyper_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,f_hyper_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable f_hyper_sd: ") + e.what());
        }

        if (!(context__.contains_r("f_var")))
            throw std::runtime_error("variable f_var missing");
        vals_r__ = context__.vals_r("f_var");
        pos__ = 0U;
        validate_non_negative_index("f_var", "N_genes", N_genes);
        context__.validate_dims("initialization", "f_var", "vector_d", context__.to_vec(N_genes));
        // generate_declaration f_var
        vector_d f_var(static_cast<Eigen::VectorXd::Index>(N_genes));
        for (int j1__ = 0U; j1__ < N_genes; ++j1__)
            f_var(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,f_var);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable f_var: ") + e.what());
        }

        if (!(context__.contains_r("lfc_sd")))
            throw std::runtime_error("variable lfc_sd missing");
        vals_r__ = context__.vals_r("lfc_sd");
        pos__ = 0U;
        context__.validate_dims("initialization", "lfc_sd", "double", context__.to_vec());
        // generate_declaration lfc_sd
        double lfc_sd(0);
        lfc_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,lfc_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lfc_sd: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ location;
        (void) location;  // dummy to suppress unused var warning
        if (jacobian__)
            location = in__.scalar_lb_constrain(0,lp__);
        else
            location = in__.scalar_lb_constrain(0);

        T__ scale_inv;
        (void) scale_inv;  // dummy to suppress unused var warning
        if (jacobian__)
            scale_inv = in__.scalar_ub_constrain(0,lp__);
        else
            scale_inv = in__.scalar_ub_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sample_mean;
        (void) sample_mean;  // dummy to suppress unused var warning
        if (jacobian__)
            sample_mean = in__.vector_constrain(N_genes,lp__);
        else
            sample_mean = in__.vector_constrain(N_genes);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta;
        (void) beta;  // dummy to suppress unused var warning
        if (jacobian__)
            beta = in__.matrix_constrain(N_genes,(N_cond - 1),lp__);
        else
            beta = in__.matrix_constrain(N_genes,(N_cond - 1));

        T__ f_mean;
        (void) f_mean;  // dummy to suppress unused var warning
        if (jacobian__)
            f_mean = in__.scalar_constrain(lp__);
        else
            f_mean = in__.scalar_constrain();

        T__ f_hyper_sd;
        (void) f_hyper_sd;  // dummy to suppress unused var warning
        if (jacobian__)
            f_hyper_sd = in__.scalar_lb_constrain(0,lp__);
        else
            f_hyper_sd = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  f_var;
        (void) f_var;  // dummy to suppress unused var warning
        if (jacobian__)
            f_var = in__.vector_lb_constrain(0,N_genes,lp__);
        else
            f_var = in__.vector_lb_constrain(0,N_genes);

        T__ lfc_sd;
        (void) lfc_sd;  // dummy to suppress unused var warning
        if (jacobian__)
            lfc_sd = in__.scalar_lb_constrain(0,lp__);
        else
            lfc_sd = in__.scalar_lb_constrain(0);


        // transformed parameters
        validate_non_negative_index("f_x", "N_genes", N_genes);
        validate_non_negative_index("f_x", "N_cond", N_cond);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  f_x(static_cast<Eigen::VectorXd::Index>(N_genes),static_cast<Eigen::VectorXd::Index>(N_cond));
        (void) f_x;  // dummy to suppress unused var warning

        stan::math::initialize(f_x, DUMMY_VAR__);
        stan::math::fill(f_x,DUMMY_VAR__);


        try {
            for (int g = 1; g <= N_genes; ++g) {

                for (int c = 1; c <= (N_cond - 1); ++c) {

                    stan::math::assign(get_base1_lhs(f_x,g,c,"f_x",1), (get_base1(sample_mean,g,"sample_mean",1) + get_base1(beta,g,c,"beta",1)));
                }
                stan::math::assign(get_base1_lhs(f_x,g,N_cond,"f_x",1), (get_base1(sample_mean,g,"sample_mean",1) + (0 - sum(get_base1(beta,g,"beta",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < N_genes; ++i0__) {
            for (int i1__ = 0; i1__ < N_cond; ++i1__) {
                if (stan::math::is_uninitialized(f_x(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: f_x" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(cauchy_log<propto__>(f_hyper_sd, 0, 5));
            lp_accum__.add(normal_log<propto__>(lfc_sd, 0, 1));
            lp_accum__.add(scaled_inv_chi_square_log<propto__>(f_var, f_nu, sqrt(f_sigma)));
            lp_accum__.add(normal_log<propto__>(sample_mean, f_mean, f_hyper_sd));
            for (int g = 1; g <= N_genes; ++g) {

                for (int c = 1; c <= (N_cond - 1); ++c) {

                    lp_accum__.add(normal_log<propto__>(get_base1(beta,g,c,"beta",1), 0, lfc_sd));
                }
            }
            for (int g = 1; g <= N_genes; ++g) {

                for (int s = 1; s <= N_samp; ++s) {

                    lp_accum__.add(hurdle_normal_lpdf<propto__>(get_base1(Y,g,s,"Y",1), get_base1(f_x,g,get_base1(design,s,"design",1),"f_x",1), sqrt(get_base1(f_var,g,"f_var",1)), prob_fnc(get_base1(f_x,g,get_base1(design,s,"design",1),"f_x",1),location,(1 / scale_inv), pstream__), pstream__));
                }
            }
            lp_accum__.add(normal_log<propto__>(location, 0, 10));
            lp_accum__.add(normal_log<propto__>(scale_inv, 0, 10));
            for (int g = 1; g <= N_genes; ++g) {

                if (as_bool(logical_neq(sum(get_base1(Y,g,"Y",1)),0))) {

                    for (int s = 1; s <= N_samp; ++s) {

                        lp_accum__.add(bernoulli_logit_log<propto__>(logical_neq(get_base1(Y,g,s,"Y",1),0), prob_fnc(get_base1(f_x,g,get_base1(design,s,"design",1),"f_x",1),location,(1 / scale_inv), pstream__)));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("location");
        names__.push_back("scale_inv");
        names__.push_back("sample_mean");
        names__.push_back("beta");
        names__.push_back("f_mean");
        names__.push_back("f_hyper_sd");
        names__.push_back("f_var");
        names__.push_back("lfc_sd");
        names__.push_back("f_x");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_genes);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_genes);
        dims__.push_back((N_cond - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_genes);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_genes);
        dims__.push_back(N_cond);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_estimate_sigmoid_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double location = in__.scalar_lb_constrain(0);
        double scale_inv = in__.scalar_ub_constrain(0);
        vector_d sample_mean = in__.vector_constrain(N_genes);
        matrix_d beta = in__.matrix_constrain(N_genes,(N_cond - 1));
        double f_mean = in__.scalar_constrain();
        double f_hyper_sd = in__.scalar_lb_constrain(0);
        vector_d f_var = in__.vector_lb_constrain(0,N_genes);
        double lfc_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(location);
        vars__.push_back(scale_inv);
        for (int k_0__ = 0; k_0__ < N_genes; ++k_0__) {
            vars__.push_back(sample_mean[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < (N_cond - 1); ++k_1__) {
            for (int k_0__ = 0; k_0__ < N_genes; ++k_0__) {
                vars__.push_back(beta(k_0__, k_1__));
            }
        }
        vars__.push_back(f_mean);
        vars__.push_back(f_hyper_sd);
        for (int k_0__ = 0; k_0__ < N_genes; ++k_0__) {
            vars__.push_back(f_var[k_0__]);
        }
        vars__.push_back(lfc_sd);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("f_x", "N_genes", N_genes);
        validate_non_negative_index("f_x", "N_cond", N_cond);
        matrix_d f_x(static_cast<Eigen::VectorXd::Index>(N_genes),static_cast<Eigen::VectorXd::Index>(N_cond));
        (void) f_x;  // dummy to suppress unused var warning

        stan::math::initialize(f_x, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(f_x,DUMMY_VAR__);


        try {
            for (int g = 1; g <= N_genes; ++g) {

                for (int c = 1; c <= (N_cond - 1); ++c) {

                    stan::math::assign(get_base1_lhs(f_x,g,c,"f_x",1), (get_base1(sample_mean,g,"sample_mean",1) + get_base1(beta,g,c,"beta",1)));
                }
                stan::math::assign(get_base1_lhs(f_x,g,N_cond,"f_x",1), (get_base1(sample_mean,g,"sample_mean",1) + (0 - sum(get_base1(beta,g,"beta",1)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < N_cond; ++k_1__) {
            for (int k_0__ = 0; k_0__ < N_genes; ++k_0__) {
                vars__.push_back(f_x(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_estimate_sigmoid";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "location";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_inv";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_genes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sample_mean" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (N_cond - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_genes; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "f_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f_hyper_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_genes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f_var" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lfc_sd";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N_cond; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_genes; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f_x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "location";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "scale_inv";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_genes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sample_mean" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (N_cond - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_genes; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "f_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "f_hyper_sd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_genes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "f_var" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lfc_sd";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= N_cond; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N_genes; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "f_x" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}




#endif
